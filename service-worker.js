/*
# service-worker.js

https://developers.google.com/web/fundamentals/primers/service-workers/?hl=ja

## 概要

- このservice-workerの実装では、iOS safari/android chromeで以下の機能を担保する目標で実装調査を進めています。

	- オフライン動作の担保
		- アプリがオフラインであることを検知したら、
			- 必須アセットがなければダウンロードが必要であることを促す
			- 任意アセットがなければオンラインでダウンロードできることを伝える
			- アプリをオフラインモードで提供する

	- 事前ダウンロード機能の提供
		- case 1: 必須アセットがなくオフラインだった場合
			- あまり考えられない。この場合、service worker動作に必要な要素もないことになる。

## 仕様の検討

まずどんな状態があるのかを検討する。

- オン・オフ任意:
	- 「最小構成」がダウンロードできていない
		- 404か、半端な状態で実行されて何もできない状態。
		- 初回アクセスは可能な限り通信状態が良い時に試してもらえるよう、誘導もとページで案内するしかないだろう。

- オン・オフ任意: 最小構成の動作物がDL済み

	- この時、少なくとも以下のことができる。
		- 事前ダウンロードが必要な要素の存在を告知できる
		- 任意ダウンロードができることと、あとでダウンロードすることができることを告知できる
		- オンラインモードではより便利に使える / ゲームならばより楽しめるオプションがあることを告知できる

- オフライン

	- オフライン1: 必須項目がダウンロード済み
		- 新しいバージョンの確認ができないことを告知できる
		- 任意ダウンロードデータが残っている場合、オンラインでダウンロードできることを告知できる

	- オフライン2: 任意項目も全てダウンロード済み
		- 新しいバージョンの確認ができないことを告知できる

- オンライン

	- 前提

		- 前提1: 起動のたびに、最新リソースリストJSONだけはキャッシュなしでアクセスする。
			- 更新リソースがあるかどうかを確認する。

		- 前提2: この状態では、最小構成はDL済みであることが保証されている。

	- オンラインx: 必須項目に更新がある

	- オンラインx: 任意項目がダウンロード済みで、最新版確認済み
		- アプリは開発側の想定した状態になっている。告知なし。

	- オンライン1: 任意項目が未ダウンロード
		- ダウンロードできることを告知したい。
		- もちろん任意なのでうるさくならない程度に……。

*/


self.addEventListener('install', function (e) {
	console.log('[ServiceWorker] Install');
});

self.addEventListener('activate', function (e) {
	console.log('[ServiceWorker] Activate');
});

// 現状では、この処理を書かないとService Workerが有効と判定されないようです
self.addEventListener('fetch', function (event) {});